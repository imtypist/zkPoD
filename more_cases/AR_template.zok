import "ecc/proofOfOwnership.zok" as proofOfOwnership;
import "ecc/babyjubjubParams.zok" as context;
from "ecc/babyjubjubParams" import BabyJubJubParams;
import "hashes/sha256/512bit" as sha256;

def AR(u32[DATA_LEN] ts) -> bool {
  u32 p = 5; // AR(5)
  u32[5] coefficients = [1; 5]; // coefficients should be trained parameters, here we use dummy coefficients
  u32 mut err = 0;
  for u32 i in 5..DATA_LEN {
    u32 xt = ts[i-5]*coefficients[0] + ts[i-4]*coefficients[1] + ts[i-3]*coefficients[2] + ts[i-2]*coefficients[3] + ts[i-1]*coefficients[4];
    err = err + (xt - ts[i])*(xt - ts[i]);
  }

  u32 threshold = 1000;
  bool output = err > threshold ? false : true;

  return output;
}


def main(field[2] pk, private field sk, u32[DATA_LEN] input, u32[16] lastBlock) -> (bool, u32[8]) {
  // load BabyJubJub context
  BabyJubJubParams ctx = context();
  
  // pair(sk, pk), prove ownership of sk
  bool isPair = proofOfOwnership(pk, sk, ctx);
  assert(isPair == true);

  // verify data quality: implement specific outlier detection algorithms here
  bool output = AR(input);

  u32[8] h = sha256(lastBlock[0..8], lastBlock[8..16]);

  return (output, h);
}